# coding: utf-8

"""
    SMS Fusion API

    This is the SMS Fusion API

    OpenAPI spec version: 1.0.0
    Contact: support@smsfusion.com.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HLRResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, success=None, failure=None, cost=None, callback=None):
        """
        HLRResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'success': 'list[int]',
            'failure': 'list[int]',
            'cost': 'float',
            'callback': 'str'
        }

        self.attribute_map = {
            'status': 'status',
            'success': 'success',
            'failure': 'failure',
            'cost': 'cost',
            'callback': 'callback'
        }

        self._status = status
        self._success = success
        self._failure = failure
        self._cost = cost
        self._callback = callback

    @property
    def status(self):
        """
        Gets the status of this HLRResult.

        :return: The status of this HLRResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this HLRResult.

        :param status: The status of this HLRResult.
        :type: str
        """

        self._status = status

    @property
    def success(self):
        """
        Gets the success of this HLRResult.

        :return: The success of this HLRResult.
        :rtype: list[int]
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this HLRResult.

        :param success: The success of this HLRResult.
        :type: list[int]
        """

        self._success = success

    @property
    def failure(self):
        """
        Gets the failure of this HLRResult.

        :return: The failure of this HLRResult.
        :rtype: list[int]
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """
        Sets the failure of this HLRResult.

        :param failure: The failure of this HLRResult.
        :type: list[int]
        """

        self._failure = failure

    @property
    def cost(self):
        """
        Gets the cost of this HLRResult.
        Cost of the response

        :return: The cost of this HLRResult.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this HLRResult.
        Cost of the response

        :param cost: The cost of this HLRResult.
        :type: float
        """

        self._cost = cost

    @property
    def callback(self):
        """
        Gets the callback of this HLRResult.
        Callback URL provided

        :return: The callback of this HLRResult.
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """
        Sets the callback of this HLRResult.
        Callback URL provided

        :param callback: The callback of this HLRResult.
        :type: str
        """

        self._callback = callback

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HLRResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
